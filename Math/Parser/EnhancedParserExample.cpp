/**\n * Enhanced Parser Usage Example\n * \n * This example demonstrates the enhanced Parser functionality with:\n * - Command execution using the Commands pattern\n * - Metadata retrieval for value trackers (qreal and QPointF)\n * - Q_INVOKABLE methods for QML integration\n */\n\n #include \"parser.h\"\n#include \"../Scene.h\"\n#include <QDebug>\n#include <QJsonDocument>\n\nclass EnhancedParserExample\n{\npublic:\n    static void demonstrateEnhancedParser(Scene* scene)\n    {\n        qDebug() << \"=== Enhanced Parser Demo ===\";\n        \n        // Create parser instance\n        Parser* parser = new Parser(scene);\n        \n        // Connect signals for feedback\n        QObject::connect(parser, &Parser::commandExecuted, [](const QString& cmd, const QString& input) {\n            qDebug() << \"âœ“ Command executed:\" << cmd << \"Input:\" << input;\n        });\n        \n        QObject::connect(parser, &Parser::commandFailed, [](const QString& input, const QString& error) {\n            qDebug() << \"âœ— Command failed:\" << input << \"Error:\" << error;\n        });\n        \n        QObject::connect(parser, &Parser::trackerCreated, [](const QString& name) {\n            qDebug() << \"ðŸ“ˆ Tracker created:\" << name;\n        });\n        \n        // Test individual commands\n        qDebug() << \"\\n=== Testing Individual Commands ===\";\n        \n        // Create value trackers\n        parser->parseCommand(\"val x = 5.0;\");\n        parser->parseCommand(\"val y = 3.14;\");\n        parser->parseCommand(\"val z = -2.5;\");\n        \n        // Create point tracker\n        parser->parseCommand(\"pval origin = (0.0, 0.0);\");\n        parser->parseCommand(\"pval point1 = (10.5, 20.3);\");\n        \n        // Create dynamic value tracker (depends on other trackers)\n        parser->parseCommand(\"dval sum = [x] + [y];\");\n        parser->parseCommand(\"dval product = [x] * [y];\");\n        \n        // Test script execution\n        qDebug() << \"\\n=== Testing Script Execution ===\";\n        QString script = R\"(\n            val a = 1.0;\n            val b = 2.0;\n            dval result = [a] + [b] * 3;\n            pval center = (5.0, 5.0);\n        )\";\n        \n        parser->executeScript(script);\n        \n        // Test metadata retrieval\n        qDebug() << \"\\n=== Testing Metadata Retrieval ===\";\n        \n        // Get all tracker values\n        QVariantMap allValues = parser->getAllTrackerValues();\n        qDebug() << \"All tracker values:\" << allValues;\n        \n        // Get value tracker metadata\n        QVariantMap valueMetadata = parser->getValueTrackerMetadata();\n        qDebug() << \"Value tracker metadata:\" << valueMetadata;\n        \n        // Get point tracker metadata\n        QVariantMap pointMetadata = parser->getPointTrackerMetadata();\n        qDebug() << \"Point tracker metadata:\" << pointMetadata;\n        \n        // Get complete metadata as JSON\n        QJsonObject jsonMetadata = parser->getTrackerMetadataAsJson();\n        QJsonDocument doc(jsonMetadata);\n        qDebug() << \"Complete metadata JSON:\" << doc.toJson(QJsonDocument::Compact);\n        \n        // Test individual tracker queries\n        qDebug() << \"\\n=== Testing Individual Queries ===\";\n        qDebug() << \"Tracker 'x' value:\" << parser->getTrackerValue(\"x\");\n        qDebug() << \"Point tracker 'origin':\" << parser->getPointTrackerValue(\"origin\");\n        qDebug() << \"Has tracker 'sum':\" << parser->hasTracker(\"sum\");\n        qDebug() << \"Has tracker 'nonexistent':\" << parser->hasTracker(\"nonexistent\");\n        \n        // List all trackers\n        qDebug() << \"Value trackers:\" << parser->getTrackerNames();\n        qDebug() << \"Point trackers:\" << parser->getPointTrackerNames();\n        \n        qDebug() << \"\\n=== Demo Complete ===\";\n    }\n    \n    /**\n     * Example of using parser from QML\n     */\n    static void demonstrateQMLUsage()\n    {\n        qDebug() << \"\\n=== QML Usage Example ===\";\n        qDebug() << \"In QML, you can use:\";\n        qDebug() << \"\";\n        qDebug() << \"Parser {\";\n        qDebug() << \"    id: scriptParser\";\n        qDebug() << \"    \";\n        qDebug() << \"    Component.onCompleted: {\";\n        qDebug() << \"        scriptParser.parseCommand('val myValue = 42.0;')\";\n        qDebug() << \"        console.log('Value:', scriptParser.getTrackerValue('myValue'))\";\n        qDebug() << \"        console.log('All values:', scriptParser.getAllTrackerValues())\";\n        qDebug() << \"    }\";\n        qDebug() << \"    \";\n        qDebug() << \"    onCommandExecuted: function(cmd, input) {\";\n        qDebug() << \"        console.log('Executed:', cmd, input)\";\n        qDebug() << \"    }\";\n        qDebug() << \"    \";\n        qDebug() << \"    onTrackerCreated: function(name) {\";\n        qDebug() << \"        console.log('New tracker:', name)\";\n        qDebug() << \"    }\";\n        qDebug() << \"}\";\n    }\n    \n    /**\n     * Example command patterns supported\n     */\n    static void showSupportedCommands()\n    {\n        qDebug() << \"\\n=== Supported Command Patterns ===\";\n        qDebug() << \"\";\n        qDebug() << \"1. Create value tracker:\";\n        qDebug() << \"   val <name> = <value>;\";\n        qDebug() << \"   Example: val speed = 10.5;\";\n        qDebug() << \"\";\n        qDebug() << \"2. Create point tracker:\";\n        qDebug() << \"   pval <name> = (<x>, <y>);\";\n        qDebug() << \"   Example: pval position = (100.0, 200.0);\";\n        qDebug() << \"\";\n        qDebug() << \"3. Create dynamic value tracker:\";\n        qDebug() << \"   dval <name> = <expression>;\";\n        qDebug() << \"   Example: dval area = [width] * [height];\";\n        qDebug() << \"\";\n        qDebug() << \"4. Create dynamic point tracker:\";\n        qDebug() << \"   dpval <name> = <expression>;\";\n        qDebug() << \"   Example: dpval center = ({p1} + {p2}) / 2;\";\n        qDebug() << \"\";\n        qDebug() << \"5. Connect tracker to mobject property:\";\n        qDebug() << \"   connectval(<tracker>, <mobject>.<property>);\";\n        qDebug() << \"   Example: connectval(rotation, myCircle.angle);\";\n    }\n};