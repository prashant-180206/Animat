/**\n * CommandFactory Usage Example\n * \n * This example demonstrates the new CommandFactory approach with:\n * - Regex-based command type detection\n * - Clean command creation without dynamic_cast\n * - Semicolon-based script parsing\n */\n\n #include \"parser.h\"\n#include \"CommandFactory.h\"\n#include \"../Scene.h\"\n#include <QDebug>\n\nclass CommandFactoryExample\n{\npublic:\n    static void demonstrateCommandFactory(Scene* scene)\n    {\n        qDebug() << \"=== CommandFactory Demo ===\";\n        \n        // Create parser with new factory approach\n        Parser* parser = new Parser(scene);\n        \n        // Connect signals\n        QObject::connect(parser, &Parser::commandExecuted, [](const QString& cmd, const QString& input) {\n            qDebug() << \"✓ Executed:\" << input;\n        });\n        \n        QObject::connect(parser, &Parser::commandFailed, [](const QString& input, const QString& error) {\n            qDebug() << \"✗ Failed:\" << input << \"->\" << error;\n        });\n        \n        // Test individual commands\n        qDebug() << \"\\n=== Testing Individual Commands ===\";\n        parser->parseCommand(\"val x = 5.0;\");\n        parser->parseCommand(\"val y = 3.14;\");\n        parser->parseCommand(\"pval center = (0.0, 0.0);\");\n        parser->parseCommand(\"dval sum = [x] + [y];\");\n        \n        // Test script with semicolon parsing\n        qDebug() << \"\\n=== Testing Script Execution ===\";\n        QString script = R\"(\n            val a = 1.0; val b = 2.0;\n            dval result = [a] + [b] * 3;\n            pval origin = (0.0, 0.0); // Comment\n            val c = 4.5;\n        )\";\n        \n        parser->executeScript(script);\n        \n        // Test metadata\n        qDebug() << \"\\n=== Testing Metadata ===\";\n        qDebug() << \"All values:\" << parser->getAllTrackerValues();\n        qDebug() << \"Value trackers:\" << parser->getTrackerNames();\n        qDebug() << \"Point trackers:\" << parser->getPointTrackerNames();\n        \n        qDebug() << \"\\n=== Demo Complete ===\";\n    }\n    \n    static void demonstrateCommandTypes()\n    {\n        qDebug() << \"\\n=== Command Type Detection ===\";\n        \n        CommandFactory factory;\n        \n        QStringList testCommands = {\n            \"val speed = 10.5;\",\n            \"pval position = (100.0, 200.0);\",\n            \"dval area = [width] * [height];\",\n            \"dpval center = ({p1} + {p2}) / 2;\",\n            \"connectval(rotation, myCircle.angle);\",\n            \"invalid command\"\n        };\n        \n        for (const QString& cmd : testCommands) {\n            CommandType type = factory.getCommandType(cmd);\n            QString typeName;\n            \n            switch (type) {\n                case CommandType::MakeValCommand: typeName = \"MakeValCommand\"; break;\n                case CommandType::MakePtvalCommand: typeName = \"MakePtvalCommand\"; break;\n                case CommandType::DvalCommand: typeName = \"DvalCommand\"; break;\n                case CommandType::DpvalCommand: typeName = \"DpvalCommand\"; break;\n                case CommandType::ConnectCommand: typeName = \"ConnectCommand\"; break;\n                default: typeName = \"Unknown\"; break;\n            }\n            \n            qDebug() << \"Command:\" << cmd;\n            qDebug() << \"Type:\" << typeName;\n            qDebug() << \"\";\n        }\n    }\n    \n    static void showScriptParsing()\n    {\n        qDebug() << \"\\n=== Script Parsing Example ===\";\n        qDebug() << \"\";\n        qDebug() << \"Original script:\";\n        qDebug() << \"val x = 1; val y = 2; // comment\";\n        qDebug() << \"dval z = [x] + [y];\";\n        qDebug() << \"\";\n        qDebug() << \"Parsed commands:\";\n        qDebug() << \"1. val x = 1;\";\n        qDebug() << \"2. val y = 2;\";\n        qDebug() << \"3. dval z = [x] + [y];\";\n        qDebug() << \"\";\n        qDebug() << \"Benefits:\";\n        qDebug() << \"- Semicolon-based splitting (more reliable than newlines)\";\n        qDebug() << \"- Automatic comment filtering\";\n        qDebug() << \"- Proper command termination\";\n        qDebug() << \"- No regex duplication\";\n    }\n};